#+title: introduction to lattices and order

* [note]

*** lattice

    - a cover b
      b under a

*** example of lattice

    - natural number
      with gcd as meet
      number better viewed as been fully factorized to prime

    - convex figure in space
      [topological space]

    - linear term lattice

    - term lattice

*** ><

    - 在引入具體的 項格 時
      需要用 棧傳遞函數來實現其中的基本關係與基本運算
      還需要 env passing

    - 注意對等詞的處理

    - 當考慮分解好的自然數時
      數就類似 term 了
      而 求 gcd 的過程 就類似 unification

*** [EWD1240a] a little bit of lattice theory

    - *type-constructor*
      (<lattice> = <lattice>)
      (<lattice> under <lattice>)
    - *axiom*
      reflexive of under
      (x : <lattice> -> (x under x))
    - the following proposition is equal to reflexive
      (x y : <lattice> (x = y) -> (x under y) (y under x))
      one-point-rule
      (x x : <lattice> (x = x) -> (x under x) (x under x))
      drop
      (x : <lattice> -> (x under x))
    - *axiom*
      antisymmetric of under
      (x y : <lattice> (x under y) (y under x) -> (x = y))
    - by reflexive of under
      we can proof indirect under
      1. ((x y z : <lattice> (z under x) -> (z under y)) -> (x under y))
      2. ((x y z : <lattice> (y under z) -> (x under z)) -> (x under y))
      proof 1
      (x y z : <lattice> (z under x) -> (z under y))
      instantiate
      (x y x : <lattice> (x under x) -> (x under y))
      reflexive of under
      (x y x : <lattice> true -> (x under y))
      drop
      (x y : <lattice> -> (x under y))
      end proof
    - by antisymmetric of under
      we can proof indirect equal
      1. ((x y z : <lattice> (z under x) <-> (z under y)) -> (x = y))
      2. ((x y z : <lattice> (y under z) <-> (x under z)) -> (x = y))
      proof 1
      (x y z : <lattice> (z under x) <-> (z under y))
      instantiate 2 times
      (x y : <lattice>  ((x under x) <-> (x under y))  ((y under x) <-> (y under y)))
      reflexive of under
      (x y : <lattice>  (true <-> (x under y))  ((y under x) <-> true))
      drop
      (x y : <lattice>  (x under y)  (y under x))
      antisymmetric of under
      (x y : <lattice>  (x = y))
      end proof
    - *axiom*
      the existence of w
      use under to define join [up] [lowest upper bound] [superemum]
      (x y : <lattice> -> w : <lattice> (z : <lattice> -> ((w under z) <-> (x under z) (y under z))))
      define
      (x y : <lattice> -> (x join y))
      or
      (x y : <lattice> -> w : (x join y))
      a new type constructor is defined
      need to proof w is unique
      to view this type constructor as function
    - join
      1. idempotent
         (x join x) = x
      2. symmetry
         (x join y) = (y join x)
      3. associative
         ((x join y) join z) = (x join (y join z))
      proof associative
      ><><><
      end proof
    - wish to proof
      (x y : <lattice> ((x join y) = y) <-> (x under y))
      and use it to proof the transitive of under
      (x y z : <lattice> (x under y) (y under z) -> (x under z))
      thus under is partial-order
      1. reflexive
      2. antisymmetric
      3. transitive

*** ><

    #+begin_src scheme
    (* lattice (-> type)
       cover (lattice lattice -> type)
       reflexive ((:x : lattice) -> :x :x cover)
       antisymmetry
       ((:x :y : lattice)
        :x :y cover :y :x cover
        ------------------->
        :x :y equal)
       ;; maybe it is the very definition of equal
       ;; that maintaining this proposition
       indirect-cover
       (((:z : lattice) :z :x cover -> :z :y cover)
        ---------------->
        :x :y cover)
       indirect-cover'
       (((:z : lattice) :y :z cover -> :x :z cover)
        ---------------->
        :x :y cover)

       meet (lattice lattice -> lattice)
       join (lattice lattice -> lattice)
       idempotent
       ((:x : lattice) -> :x :x meet :x equal)
       symmetry
       ((:x :y : lattice) -> :x :y meet :y :x meet equal)
       associative
       (-> :x :y meet :z meet
           :x :y :z meet meet
           equal))

    ((:x : lattice) -> :x :x cover)

    ;; use the follow theorem reflexive2 to proof reflexive

    (~ reflexive2
       ((:x :y : lattice) :x :y equal -> :y :x cover :x :y cover)
       ><><><)

    ((:x :y : lattice)
     :x :y cover :y :x cover
     <------------------->
     :x :y equal)

    (~ same-equal-same
       (:x :x -> :x :x equal)
       ><><><)

    (~ reflexive ((:x : lattice) -> :x :x cover)
       (:d -> dup dup2 same-equal-same reflexive2 drop))
    #+end_src

*** equality

    - term lattice
      refl
      judgmental equality
      equal by definition
      equal by rewrite
      constant path

    - hott
      introduced equality
      path
      high-level path
      propositional equality
      equality to be proved by induction

    - bishop set theory
      interface predicate required by set
      等詞的相對性

* 1 ordered sets

*** terms

    - (order) (partial order)
      reflexivity, antisymmetry and transitivity

      A set P equipped with an order relation
      is said to be an ordered set
      (or partially ordered set) (or poset)

    - (discrete order)
      on any set, == is an order

    - (quasi-order) (pre-order)
      reflexivity and transitivity

    - (strict inequality)
      x <= y and x != y

    - (comparable)
      x <= y or x >= y

    - (incomparable)
      not x <= y and not x >= y

    - (induced order)
      the order that subset inherited from superset

    - (chain) (linearly ordered set) (totally ordered set)
      either x <= y or x >= y

    - (antichain)
      x <= y => x == y

      when using the term chain and antichain, we are often considering subsets

      A chain is a subset in which each pair of elements is comparable;
      that is, C is totally ordered.

      An antichain is a subset in which each pair of different elements is incomparable;
      that is, there is no order relation between any two different elements.

    - (order-isomorphism)
      necessarily bijective
      using reflexivity and antisymmetry
      f(x) == f(y)
      <=> f(x) <= f(y) and f(x) =< f(y)
      <=> x <= y and x =< y
      <=> x == y

*** informative

    - for data, >= can be defined as
      "is at least as informative as"

*** programs

    - The term state is used to denote an assignment,
      to the variables used by a program,
      of values drawn from the appropriate datatypes.

      The program terminates if it transforms any given state
      before its execution to a state afterwards;
      the initial and final states may be regarded as
      incorporating the input and output data.

      Frequently, the result of a computation
      will be generated step by step,
      with additional information being gained at each stage.

    - Non-termination of a program naturally arises where
      only partial information towards the solution is output in finite time.

      A program is deterministic if, starting from a given initial state,
      it will terminate in the same final state each time it is run.

      Non-determinism can occur where the program’s specification
      allows for more than one valid solution.

*** partial maps

    - f, g: PartialMap(A, B)
      f <= g := dom(f) <= dom(g) and forall x: dom(f) => f(x) == g(x)

    - function of type A => B might be viewed as
      been built up from elements of PartialMap(A, B)

    - two partial maps are consistent if we can merge them.

      if f and g are consistent,
      but f does not terminate for some input where g does,
      we can run both f and g in parallel, and kill f when g terminates.

      if f and g are consistent,
      but f runs slower for some input where g runs faster,
      we can run both f and g in parallel, and kill f when g terminates.

      in these cases, we say g refines f.

    - refinement of PartialMap is commutative, associative, and idempotent.

*** semantics and semantic domains

    - a semantic domain is a mathematical structure
      through which one can describe, analyse and reason about
      the behaviour of entities such as datatypes, programs and specifications.

*** Diagrams: the art of drawing ordered sets

    - One of the most useful and attractive features of ordered sets is that,
      in the finite case at least, they can be "drawn".

      To describe how to represent ordered sets diagrammatically,
      we need the idea of covering.

    - (cover)
      x >- y := x > y and forall x > z >= y => z == y
      (covered by)
      x -< y := x < y and forall x <= z < y => z == x

    - in the finite case

      x < y <=> exists a finite sequence of covering relations
      x = x0 −< x1 -< ... −< xn = y

      thus, the order relation determines,
      and is determined by the covering relation.

* 2 lattices and complete lattices

*** lattices as ordered sets

    - (upper bound)

    - (lower bound)

    - (least upper bound) (supremum) (sup)

    - (greatest lower bound) (infimum) (inf)

    - (top) (bottom)

    - (join) (meet)

*** lattices as algebraic structures

* 3 formal concept analysis
